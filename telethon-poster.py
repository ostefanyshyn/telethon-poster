import os
import asyncio
import base64
import json
from datetime import datetime
import pytz
import requests
import io
import gspread
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.extensions import html as tl_html
from telethon import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# Google Sheets
GSHEET_ID = os.environ.get("GSHEET_ID")
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")

# Telegram –ê–∫–∫–∞—É–Ω—Ç 1
TG1_API_ID = int(os.environ.get("TG1_API_ID", 0))
TG1_API_HASH = os.environ.get("TG1_API_HASH")
TG1_SESSION = os.environ.get("TG1_SESSION")
TG1_CHANNEL = os.environ.get("TG1_CHANNEL")

# Telegram –ê–∫–∫–∞—É–Ω—Ç 2
TG2_API_ID = int(os.environ.get("TG2_API_ID", 0))
TG2_API_HASH = os.environ.get("TG2_API_HASH")
TG2_SESSION = os.environ.get("TG2_SESSION")
TG2_CHANNEL = os.environ.get("TG2_CHANNEL")

# Telegram –ê–∫–∫–∞—É–Ω—Ç 3
TG3_API_ID = int(os.environ.get("TG3_API_ID", 0))
TG3_API_HASH = os.environ.get("TG3_API_HASH")
TG3_SESSION = os.environ.get("TG3_SESSION")
TG3_CHANNEL = os.environ.get("TG3_CHANNEL")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REFRESH_SECONDS = int(os.environ.get("REFRESH_SECONDS", 30))

# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–û–í ---

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
try:
    credentials_json = json.loads(base64.b64decode(GOOGLE_CREDS_JSON))
    gc = gspread.service_account_from_dict(credentials_json)
    sheet = gc.open_by_key(GSHEET_ID)
    worksheet = sheet.sheet1
except Exception as e:
    print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDS_JSON –∏ GSHEET_ID. {e}")
    exit()

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ê—Ä–º–µ–Ω–∏—è)
tz = pytz.timezone("Asia/Yerevan")

# –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ None, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
proxy1 = ('socks5', 'as.proxy.piaproxy.com', 5000, True,
          'user-subaccount_O9xrM-region-bd-sessid-bddtfx89d4fs5n443-sesstime-90',
          'Qefmegpajkitdotxo7')
proxy2 = ('socks5', 'as.proxy.piaproxy.com', 5000, True,
          'user-subaccount_O9xrM-region-bd-sessid-bddtfx89d4fs5n444-sesstime-90',
          'Qefmegpajkitdotxo7')
proxy3 = ('socks5', 'as.proxy.piaproxy.com', 5000, True,
          'user-subaccount_O9xrM-region-bd-sessid-bddtfx89d4fs5n445-sesstime-90',
          'Qefmegpajkitdotxo7')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram
client1 = TelegramClient(StringSession(TG1_SESSION) if TG1_SESSION else 'tg1_session', TG1_API_ID, TG1_API_HASH, proxy=proxy1)
client2 = TelegramClient(StringSession(TG2_SESSION) if TG2_SESSION else 'tg2_session', TG2_API_ID, TG2_API_HASH, proxy=proxy2)
client3 = TelegramClient(StringSession(TG3_SESSION) if TG3_SESSION else 'tg3_session', TG3_API_ID, TG3_API_HASH, proxy=proxy3)

# --- 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï EMOJI –ò –ü–ê–†–°–ï–† ---

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ HTML
class CustomHtml:
    @staticmethod
    def parse(text):
        text, entities = tl_html.parse(text)
        for i, e in enumerate(entities):
            if isinstance(e, types.MessageEntityTextUrl) and e.url.startswith("emoji/"):
                emoji_id = int(e.url.split("/", 1)[1])
                entities[i] = types.MessageEntityCustomEmoji(e.offset, e.length, document_id=emoji_id)
        return text, entities

    @staticmethod
    def unparse(text, entities):
        for i, e in enumerate(entities or []):
            if isinstance(e, types.MessageEntityCustomEmoji):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, url=f"emoji/{e.document_id}")
        return tl_html.unparse(text, entities)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
for _c in (client1, client2, client3):
    _c.parse_mode = CustomHtml()

# ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
emoji_ids = {
    1: 5429293125518510398,
    2: 5814534640949530526,
    3: 5370853949358218655,
    4: 5370674552869232639,
    5: 5372943137415111238,
    6: 5373338978780979795,
    7: 5372991528811635071,
    8: 5364098734600762220,
    9: 5460811944883660881
}

# Unicode-–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–¥–µ
emoji_placeholders = {
    1: "‚òÅÔ∏è", 2: "üëë", 3: "‚úÖ", 4: "‚úÖ", 5: "‚úÖ", 6: "‚úÖ", 7: "‚úÖ", 8: "‚ö°Ô∏è", 9: "üòú"
}

# --- 4. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ü–û–°–¢–ê ---

async def send_post(record, row_idx):
    """–°–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ."""
    # --- –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø–∏—Å–∏ (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    status = record.get("–°—Ç–∞—Ç—É—Å", "")
    name = record.get("–ò–º—è", "")
    # ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞—à–∏—Ö –ø–æ–ª–µ–π –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å)
    services = record.get("–£—Å–ª—É–≥–∏", "")
    extra_services = record.get("–î–æ–ø. —É—Å–ª—É–≥–∏", "")
    age = record.get("–í–æ–∑—Ä–∞—Å—Ç", "")
    height = record.get("–†–æ—Å—Ç", "")
    weight = record.get("–í–µ—Å", "")
    bust = record.get("–ì—Ä—É–¥—å", "")
    express_price = record.get("Express", "")
    incall_price = record.get("Incall", "")
    outcall_price = record.get("Outcall", "")
    whatsapp_link = record.get("WhatsApp", "")
    skip_text = record.get("–ü—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∫–æ—Ä–æ–Ω–æ–π", "")
    
    # --- –°–±–æ—Ä–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è (—ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    message_html = "\n".join([
        # ... (–≤—Å—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∫–∏ message_html_lines –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å)
    ])

    # --- üì∏ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ ---
    photo_column_headers = ["–°—Å—ã–ª–∫–∞ 1", "–°—Å—ã–ª–∫–∞ 2", "–°—Å—ã–ª–∫–∞ 3", "–°—Å—ã–ª–∫–∞ 4", "–°—Å—ã–ª–∫–∞ 5", "–°—Å—ã–ª–∫–∞ 6", "–°—Å—ã–ª–∫–∞ 7", "–°—Å—ã–ª–∫–∞ 8", "–°—Å—ã–ª–∫–∞ 9", "–°—Å—ã–ª–∫–∞ 10"]
    video_extensions = ['.mp4', '.mov', '.avi', '.mkv'] # –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤–∏–¥–µ–æ
    
    photo_urls = []
    video_urls = []

    for header in photo_column_headers:
        url = record.get(header)
        if url and isinstance(url, str) and url.startswith("http"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–µ–æ
            if any(url.lower().endswith(ext) for ext in video_extensions):
                video_urls.append(url)
            else:
                photo_urls.append(url)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(photo_urls)} —Ñ–æ—Ç–æ –∏ {len(video_urls)} –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}.")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    photo_data = []
    for url in photo_urls:
        try:
            # ... (–ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            resp = requests.get(url)
            resp.raise_for_status()
            photo_data.append((resp.content, url.split("/")[-1].split("?")[0] or "image.jpg"))
        except Exception as e:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ {url} - {e}")

    video_data = []
    for url in video_urls:
        try:
            # ... (–ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            resp = requests.get(url)
            resp.raise_for_status()
            video_data.append((resp.content, url.split("/")[-1].split("?")[0] or "video.mp4"))
        except Exception as e:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ {url} - {e}")

    # --- üì§ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
    tasks = []
    clients_with_channels = [(client1, TG1_CHANNEL), (client2, TG2_CHANNEL), (client3, TG3_CHANNEL)]

    for client, channel_str in clients_with_channels:
        if not (client.is_connected() and channel_str):
            continue
        
        try:
            channel = int(channel_str)
        except (ValueError, TypeError):
            channel = channel_str
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø–æ–¥–∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        tasks.append(send_media_for_client(client, channel, message_html, photo_data, video_data))

    if tasks:
        sent_messages = await asyncio.gather(*tasks)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ–π (–Ω–µ None)
        if any(sent_messages):
            worksheet.update_cell(row_idx, 1, "TRUE")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ.")
    else:
        print(f"–î–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

async def send_media_for_client(client, channel, caption, photo_data, video_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —É–ø—Ä–∞–≤–ª—è—è –æ—Ç–≤–µ—Ç–∞–º–∏."""
    last_message = None
    
    # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º —Å –ø–æ–¥–ø–∏—Å—å—é
    if photo_data:
        file_objs = [io.BytesIO(data) for data, fname in photo_data]
        for bio, (_, fname) in zip(file_objs, photo_data):
            bio.name = fname
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_album = await client.send_file(channel, file_objs, caption=caption)
        last_message = sent_album[0] if isinstance(sent_album, list) else sent_album

    # 2. –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –±—ã–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å
    elif caption and not video_data: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∏ –≤–∏–¥–µ–æ
        last_message = await client.send_message(channel, caption)
        
    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    if video_data:
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ —Ñ–æ—Ç–æ, –Ω–æ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å —Å –ø–µ—Ä–≤—ã–º –≤–∏–¥–µ–æ
        if not photo_data:
            first_video_content, first_video_name = video_data.pop(0)
            bio = io.BytesIO(first_video_content)
            bio.name = first_video_name
            last_message = await client.send_file(channel, bio, caption=caption)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for content, name in video_data:
            bio = io.BytesIO(content)
            bio.name = name
            last_message = await client.send_file(channel, bio, reply_to=last_message.id)
            
    return last_message

# --- 5. –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    clients = [c for c in [client1, client2, client3] if c.api_id and c.api_hash]
    if not clients:
        print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω Telegram –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TG_API_ID –∏ TG_API_HASH.")
        return
        
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    await asyncio.gather(*(c.start() for c in clients))
    print("–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

    while True:
        try:
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã... {datetime.now(tz).strftime('%H:%M:%S')}")
            records = worksheet.get_all_records()
            now = datetime.now(tz)

            for idx, record in enumerate(records, start=2):
                sent_flag = record.get("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                if str(sent_flag).upper() == "TRUE":
                    continue

                if not str(record.get("–ò–º—è", "")).strip():
                    continue

                time_str = record.get("–í—Ä–µ–º—è")
                if not time_str:
                    continue

                try:
                    sched_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
                    sched_time = tz.localize(sched_time)

                    if sched_time <= now:
                        print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}.")
                        await send_post(record, idx)

                except ValueError:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: '{time_str}'. –û–∂–∏–¥–∞–µ—Ç—Å—è '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°'.")
                except Exception as e:
                    print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            
            await asyncio.sleep(REFRESH_SECONDS)

        except gspread.exceptions.APIError as e:
            print(f"–û–®–ò–ë–ö–ê API Google Sheets: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {REFRESH_SECONDS} —Å–µ–∫.")
            await asyncio.sleep(REFRESH_SECONDS)
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(REFRESH_SECONDS)

# --- 6. –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ---

if __name__ == "__main__":
    asyncio.run(main())