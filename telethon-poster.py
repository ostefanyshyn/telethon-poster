import os
import asyncio
import base64
import json
from datetime import datetime
import pytz
import requests
import io
import gspread
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.extensions import html as tl_html
from telethon import types
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# Google Sheets
GSHEET_ID = os.environ.get("GSHEET_ID")
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")

# Telegram –∞–∫–∫–∞—É–Ω—Ç—ã: —á–∏—Ç–∞–µ–º TG{n}_* —Ü–∏–∫–ª–æ–º –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
accounts = []
for n in range(1, 21):
    api_id_str = os.environ.get(f"TG{n}_API_ID")
    api_hash = os.environ.get(f"TG{n}_API_HASH")
    session = os.environ.get(f"TG{n}_SESSION")
    channel = os.environ.get(f"TG{n}_CHANNEL")
    if not api_id_str or not api_hash:
        continue
    try:
        api_id = int(api_id_str)
    except Exception:
        api_id = 0
    accounts.append({"api_id": api_id, "api_hash": api_hash, "session": session, "channel": channel})

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REFRESH_SECONDS = int(os.environ.get("REFRESH_SECONDS", 30))

# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–û–í ---

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
try:
    credentials_json = json.loads(base64.b64decode(GOOGLE_CREDS_JSON))
    gc = gspread.service_account_from_dict(credentials_json)
    sheet = gc.open_by_key(GSHEET_ID)
    worksheet = sheet.sheet1
except Exception as e:
    print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDS_JSON –∏ GSHEET_ID. {e}")
    exit()

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ê—Ä–º–µ–Ω–∏—è)
tz = pytz.timezone("Asia/Yerevan")

# –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ None, –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
proxy1 = ('socks5', 'as.proxy.piaproxy.com', 5000, True,
          'user-subaccount_O9xrM-region-bd-sessid-bddtfx89d4fs5n443-sesstime-90',
          'Qefmegpajkitdotxo7')
proxy2 = ('socks5', 'as.proxy.piaproxy.com', 5000, True,
          'user-subaccount_O9xrM-region-bd-sessid-bddtfx89d4fs5n444-sesstime-90',
          'Qefmegpajkitdotxo7')
proxy3 = ('socks5', 'as.proxy.piaproxy.com', 5000, True,
          'user-subaccount_O9xrM-region-bd-sessid-bddtfx89d4fs5n445-sesstime-90',
          'Qefmegpajkitdotxo7')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
clients = []
for i, acc in enumerate(accounts):
    prx = proxy1 if i == 0 else proxy2 if i == 1 else proxy3 if i == 2 else None
    session_or_name = StringSession(acc["session"]) if acc["session"] else f"tg{i+1}_session"
    clients.append(TelegramClient(session_or_name, acc["api_id"], acc["api_hash"], proxy=prx))

# --- 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï EMOJI –ò –ü–ê–†–°–ï–† ---

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ HTML
class CustomHtml:
    @staticmethod
    def parse(text):
        text, entities = tl_html.parse(text)
        for i, e in enumerate(entities):
            if isinstance(e, types.MessageEntityTextUrl) and e.url.startswith("emoji/"):
                emoji_id = int(e.url.split("/", 1)[1])
                entities[i] = types.MessageEntityCustomEmoji(e.offset, e.length, document_id=emoji_id)
        return text, entities

    @staticmethod
    def unparse(text, entities):
        for i, e in enumerate(entities or []):
            if isinstance(e, types.MessageEntityCustomEmoji):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, url=f"emoji/{e.document_id}")
        return tl_html.unparse(text, entities)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
for _c in clients:
    _c.parse_mode = CustomHtml()

# ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
emoji_ids = {
    1: 5429293125518510398,
    2: 5814534640949530526,
    3: 5370853949358218655,
    4: 5370674552869232639,
    5: 5372943137415111238,
    6: 5373338978780979795,
    7: 5372991528811635071,
    8: 5364098734600762220,
    9: 5460811944883660881
}

# Unicode-–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–¥–µ
emoji_placeholders = {
    1: "‚òÅÔ∏è", 2: "üëë", 3: "‚úÖ", 4: "‚úÖ", 5: "‚úÖ", 6: "‚úÖ", 7: "‚úÖ", 8: "‚ö°Ô∏è", 9: "üòú"
}

# --- 4. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ü–û–°–¢–ê ---

async def send_post(record, row_idx):
    """–°–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø–∏—Å–∏
    status = record.get("–°—Ç–∞—Ç—É—Å", "")
    name = record.get("–ò–º—è", "")
    services = record.get("–£—Å–ª—É–≥–∏", "")
    extra_services = record.get("–î–æ–ø. —É—Å–ª—É–≥–∏", "")
    age = record.get("–í–æ–∑—Ä–∞—Å—Ç", "")
    height = record.get("–†–æ—Å—Ç", "")
    weight = record.get("–í–µ—Å", "")
    bust = record.get("–ì—Ä—É–¥—å", "")
    express_price = record.get("Express", "")
    incall_price = record.get("Incall", "")
    outcall_price = record.get("Outcall", "")
    whatsapp_link = record.get("WhatsApp", "")
    skip_text = record.get("–ü—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –∫–æ—Ä–æ–Ω–æ–π", "")

    # –°–±–æ—Ä–∫–∞ HTML-—Å–æ–æ–±—â–µ–Ω–∏—è
    param_lines = []
    if age and str(age).strip(): param_lines.append(f"–í–æ–∑—Ä–∞—Å—Ç - {age}")
    if height and str(height).strip(): param_lines.append(f"–†–æ—Å—Ç - {height}")
    if weight and str(weight).strip(): param_lines.append(f"–í–µ—Å - {weight}")
    if bust and str(bust).strip(): param_lines.append(f"–ì—Ä—É–¥—å - {bust}")
    
    message_html_lines = []
    if skip_text and skip_text.strip(): message_html_lines.append(skip_text)
    message_html_lines.append(f'<a href="emoji/{emoji_ids[1]}">{emoji_placeholders[1]}</a><i>{status}</i><a href="emoji/{emoji_ids[1]}">{emoji_placeholders[1]}</a>')
    message_html_lines.append("")
    prefix = f"{skip_text}" if skip_text else ""
    message_html_lines.append(f'{prefix}<a href="emoji/{emoji_ids[2]}">{emoji_placeholders[2]}</a>')
    message_html_lines.append(f'<b><i>{name}</i></b>')
    foto_checks = "".join(f'<a href="emoji/{emoji_ids[i]}">{emoji_placeholders[i]}</a>' for i in range(3, 8))
    message_html_lines.append("")
    message_html_lines.append(f'<b>–§–æ—Ç–æ {foto_checks}</b>')
    message_html_lines.append("")
    if services and str(services).strip():
        message_html_lines.append("–£—Å–ª—É–≥–∏:")
        message_html_lines.append(f'<b><i>{services}</i></b>')
        message_html_lines.append("")
    if extra_services and str(extra_services).strip():
        message_html_lines.append("–î–æ–ø. —É—Å–ª—É–≥–∏:")
        message_html_lines.append(f'<b><i>{extra_services}</i></b>')
        message_html_lines.append("")
    if param_lines:
        message_html_lines.append("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        message_html_lines.append(f'<b><i>{"\n".join(param_lines)}</i></b>')
        message_html_lines.append("")
    def _fmt_price(val): return f"{val} AMD"
    price_lines = []
    if express_price and str(express_price).strip(): price_lines.append(f"Express - {_fmt_price(express_price)}")
    if incall_price and str(incall_price).strip(): price_lines.append(f"Incall - {_fmt_price(incall_price)}")
    if outcall_price and str(outcall_price).strip(): price_lines.append(f"Outcall - {_fmt_price(outcall_price)}")
    if price_lines:
        message_html_lines.append("–¶–µ–Ω–∞:")
        message_html_lines.append(f'<b><i>{"\n".join(price_lines)}</i></b>')
        message_html_lines.append("")
    message_html_lines.append(f'<a href="emoji/{emoji_ids[8]}">{emoji_placeholders[8]}</a><b><i>–ù–∞–∑–Ω–∞—á—å –≤—Å—Ç—Ä–µ—á—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</i></b><a href="emoji/{emoji_ids[8]}">{emoji_placeholders[8]}</a>')
    message_html_lines.append(f'<a href="{whatsapp_link}"><b>–°–≤—è–∑—å –≤ WhatsApp</b></a> <a href="emoji/{emoji_ids[9]}">{emoji_placeholders[9]}</a>')
    message_html = "\n".join(message_html_lines)

    # –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    photo_column_headers = ["–°—Å—ã–ª–∫–∞ 1", "–°—Å—ã–ª–∫–∞ 2", "–°—Å—ã–ª–∫–∞ 3", "–°—Å—ã–ª–∫–∞ 4", "–°—Å—ã–ª–∫–∞ 5", "–°—Å—ã–ª–∫–∞ 6", "–°—Å—ã–ª–∫–∞ 7", "–°—Å—ã–ª–∫–∞ 8", "–°—Å—ã–ª–∫–∞ 9", "–°—Å—ã–ª–∫–∞ 10"]
    photo_urls = []
    for header in photo_column_headers:
        url = record.get(header)
        if url and isinstance(url, str) and url.startswith("http"):
            photo_urls.append(url)
            
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(photo_urls)} URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}.")

    photo_data = []
    if photo_urls:
        for url in photo_urls:
            try:
                resp = requests.get(url)
                resp.raise_for_status()
                file_data = resp.content
                file_name = url.split("/")[-1].split("?")[0] or "image.jpg"
                photo_data.append((file_data, file_name))
            except Exception as e:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {url} - {e}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    tasks = []
    clients_with_channels = [(c, acc.get("channel")) for c, acc in zip(clients, accounts)]

    for client, channel_str in clients_with_channels:
        if not (client.is_connected() and channel_str):
            continue
        
        try:
            channel = int(channel_str)
        except (ValueError, TypeError):
            channel = channel_str

        if photo_data:
            file_objs = [io.BytesIO(data) for data, fname in photo_data]
            for bio, (_, fname) in zip(file_objs, photo_data):
                bio.name = fname
            tasks.append(client.send_file(channel, file_objs, caption=message_html))
        else:
            tasks.append(client.send_message(channel, message_html))

    if tasks:
        await asyncio.gather(*tasks)
        worksheet.update_cell(row_idx, 1, "TRUE")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ.")
    else:
        print(f"–î–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx} –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

# --- 5. –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if not clients:
        print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω Telegram –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TG{n}_API_ID –∏ TG{n}_API_HASH.")
        return
        
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    await asyncio.gather(*(c.start() for c in clients))
    print("–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

    while True:
        try:
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã... {datetime.now(tz).strftime('%H:%M:%S')}")
            records = worksheet.get_all_records()
            now = datetime.now(tz)

            for idx, record in enumerate(records, start=2):
                sent_flag = record.get("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                if str(sent_flag).upper() == "TRUE":
                    continue

                if not str(record.get("–ò–º—è", "")).strip():
                    continue

                time_str = record.get("–í—Ä–µ–º—è")
                if not time_str:
                    continue

                try:
                    sched_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
                    sched_time = tz.localize(sched_time)

                    if sched_time <= now:
                        print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}.")
                        await send_post(record, idx)

                except ValueError:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: '{time_str}'. –û–∂–∏–¥–∞–µ—Ç—Å—è '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°'.")
                except Exception as e:
                    print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
            
            await asyncio.sleep(REFRESH_SECONDS)

        except gspread.exceptions.APIError as e:
            print(f"–û–®–ò–ë–ö–ê API Google Sheets: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {REFRESH_SECONDS} —Å–µ–∫.")
            await asyncio.sleep(REFRESH_SECONDS)
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(REFRESH_SECONDS)

# --- 6. –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ---

if __name__ == "__main__":
    asyncio.run(main())