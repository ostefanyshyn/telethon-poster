import asyncio
import base64
import json
import os
import re
from datetime import datetime
import pytz
import requests
import io
import gspread
import sys
import logging
import traceback
from telethon.network import connection as tl_connection
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.extensions import html as tl_html
from telethon import types
import telethon.errors as tl_errors
from dotenv import load_dotenv

# Optional: pixel-accurate text width via Pillow (recommended on render.com)
try:
    from PIL import ImageFont
    _PIL_AVAILABLE = True
except Exception:
    _PIL_AVAILABLE = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Mute noisy Telethon reconnect logs like "Server closed the connection" unless explicitly overridden
LOG_LEVEL = os.environ.get("TELETHON_LOG_LEVEL", "ERROR").upper()
try:
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(name)s: %(message)s")
    logging.getLogger("telethon").setLevel(getattr(logging, LOG_LEVEL, logging.ERROR))
    logging.getLogger("telethon.network").setLevel(getattr(logging, LOG_LEVEL, logging.ERROR))
    logging.getLogger("telethon.network.mtprotosender").setLevel(getattr(logging, LOG_LEVEL, logging.ERROR))
except Exception:
    pass

# === Telegram DM notifications via Bot API ===================================
# Configure env: TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.environ.get("TELEGRAM_CHAT_ID")

def tg_notify(text: str):
    """
    Fire-and-forget notification to your personal chat via Bot API.
    Does nothing if TELEGRAM_BOT_TOKEN/TELEGRAM_CHAT_ID are not set.
    """
    if not (TELEGRAM_BOT_TOKEN and TELEGRAM_CHAT_ID):
        return
    try:
        msg = str(text)
        # Telegram max length ~4096
        requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            data={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": msg[:4000],
                "disable_web_page_preview": True,
            },
            timeout=(3, 10),
        )
    except Exception:
        # never break the app because of notifications
        pass

class TGBotLoggingHandler(logging.Handler):
    """Send ERROR/CRITICAL logs to Telegram DM."""
    def emit(self, record: logging.LogRecord):
        try:
            msg = self.format(record)
            if record.exc_info:
                msg += "\n\n" + "".join(traceback.format_exception(*record.exc_info))
            app = os.getenv("HEROKU_APP_NAME", "telethon-poster")
            tg_notify(f"üö® {app}\n{msg}")
        except Exception:
            pass

_lvl = logging.ERROR
_tg_handler = TGBotLoggingHandler(level=_lvl)
_tg_handler.setFormatter(logging.Formatter("%(name)s: %(message)s"))
logging.getLogger().addHandler(_tg_handler)

# Helper to log and DM-notify skipped publications
def _notify_skip(row_idx, reason):
    logging.error(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: {reason}")
    tg_notify(f"‚ö†Ô∏è –°—Ç—Ä–æ–∫–∞ {row_idx}: {reason}")

# Helper to warn (but not skip) about media issues and continue with remaining files
def _notify_media_issue(row_idx, reason):
    logging.warning(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: {reason}")
    tg_notify(f"‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ {row_idx}: {reason}")

# --- MEDIA DOWNLOAD (—Å –ø–æ–¥–±–æ—Ä–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π) ----------------------------------

def _swap_media_extension(url: str):
    url_str = str(url or "")
    # Match an extension right before end or a query/hash (e.g. .jpg, .PNG)
    m = re.search(r'(\.[A-Za-z0-9]+)(?=$|[?#])', url_str)
    all_exts = (
        ".jpg", ".JPG",
        ".jpeg", ".JPEG",
        ".png", ".PNG",
        ".webp", ".WEBP",
        ".mp4", ".MP4",
        ".mov", ".MOV",
    )
    if m:
        prefix = url_str[:m.start(1)]
        suffix = url_str[m.end(1):]
        current_ext = url_str[m.start(1):m.end(1)]  # keep original case
        alts = [prefix + ext + suffix for ext in all_exts if ext != current_ext]
    else:
        # No extension: propose base + every extension
        alts = [url_str + ext for ext in all_exts]
    return alts or None

def _download_with_fallback(url: str, row_idx: int, timeout=(5, 60)):
    try:
        resp = requests.get(url, timeout=timeout)
        resp.raise_for_status()
        return resp.content, url, resp.headers.get('Content-Type', '').lower()
    except Exception as first_e:
        alts = _swap_media_extension(url)
        if not alts:
            raise first_e
        last_err = first_e
        for alt in alts:
            try:
                resp = requests.get(alt, timeout=timeout)
                resp.raise_for_status()
                return resp.content, alt, resp.headers.get('Content-Type', '').lower()
            except Exception as e:
                last_err = e
                continue
        raise last_err

_DEF_EXTS = (
    ".jpg", ".JPG",
    ".jpeg", ".JPEG",
    ".png", ".PNG",
    ".webp", ".WEBP",
    ".mp4", ".MP4",
    ".mov", ".MOV",
)

def _has_known_ext(url: str) -> bool:
    u = str(url or "").lower()
    return any(u.endswith(ext) for ext in _DEF_EXTS)

def _download_with_ext_guess(url: str, row_idx: int, timeout=(5, 60)):
    u = str(url or "")
    return _download_with_fallback(u, row_idx, timeout=timeout)

def _global_excepthook(exc_type, exc, tb):
    logging.critical("Unhandled exception", exc_info=(exc_type, exc, tb))
sys.excepthook = _global_excepthook

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–µ—Ä—Å–∏–∏ Python (Telethon –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∞ Python 3.13)
if sys.version_info >= (3, 13):
    print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω Python 3.13+. –ò–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ asyncio —Å Telethon. "
          "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.11‚Äì3.12 –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å Telethon –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.")

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# Google Sheets
GSHEET_ID = os.environ.get("GSHEET_ID")
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")

# –û–±—â–∏–µ Telegram API –∫—Ä–µ–¥—ã
TG_API_ID_STR = os.environ.get("TG_API_ID")
TG_API_HASH = os.environ.get("TG_API_HASH")
if not TG_API_ID_STR or not TG_API_HASH:
    print("–û–®–ò–ë–ö–ê: –£–∫–∞–∂–∏—Ç–µ –æ–±—â–∏–µ TG_API_ID –∏ TG_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)
try:
    TG_API_ID = int(TG_API_ID_STR)
except Exception:
    print("–û–®–ò–ë–ö–ê: TG_API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    exit(1)

# –û–¥–∏–Ω –æ–±—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
TG_SESSION = os.environ.get("TG_SESSION") or os.environ.get("TG1_SESSION")
if not TG_SESSION:
    print("–û–®–ò–ë–ö–ê: –£–∫–∞–∂–∏—Ç–µ TG_SESSION (StringSession –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞) –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π (–æ–±—â–∏–π) –ø—Ä–æ–∫—Å–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ): TG_PROXY_* –∏–ª–∏ TG16_PROXY_* –∫–∞–∫ —Ñ–æ–ª–±—ç–∫
GLOBAL_PROXY = None
gp_type = os.environ.get("TG_PROXY_TYPE") or os.environ.get("PROXY_TYPE")
gp_host = os.environ.get("TG_PROXY_HOST") or os.environ.get("PROXY_HOST")
gp_port_str = os.environ.get("TG_PROXY_PORT") or os.environ.get("PROXY_PORT")
gp_rdns_str = os.environ.get("TG_PROXY_RDNS", os.environ.get("PROXY_RDNS", "true"))
gp_user = os.environ.get("TG_PROXY_USER") or os.environ.get("PROXY_USER")
gp_pass = os.environ.get("TG_PROXY_PASS") or os.environ.get("PROXY_PASS")

# –§–æ–ª–±—ç–∫ –∫ TG16_PROXY_*
if not (gp_type and gp_host and gp_port_str):
    gp_type = os.environ.get("TG16_PROXY_TYPE", gp_type)
    gp_host = os.environ.get("TG16_PROXY_HOST", gp_host)
    gp_port_str = os.environ.get("TG16_PROXY_PORT", gp_port_str)
    gp_rdns_str = os.environ.get("TG16_PROXY_RDNS", gp_rdns_str)
    gp_user = os.environ.get("TG16_PROXY_USER", gp_user)
    gp_pass = os.environ.get("TG16_PROXY_PASS", gp_pass)

if gp_type and gp_host and gp_port_str:
    try:
        gp_port = int(gp_port_str)
    except Exception:
        gp_port = None
    if gp_port:
        gp_rdns = str(gp_rdns_str).lower() in ("1", "true", "yes", "y", "on")
        GLOBAL_PROXY = (gp_type, gp_host, gp_port, gp_rdns, gp_user, gp_pass)

# –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∫—Å–∏ –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤–∫–ª—é—á–µ–Ω–æ)
REQUIRE_PROXY = str(os.environ.get("REQUIRE_PROXY", "true")).lower() in ("1", "true", "yes", "on")

# –°–æ–±–∏—Ä–∞–µ–º –¥–æ 20 –∫–∞–Ω–∞–ª–æ–≤ TG{n}_CHANNEL
CHANNELS_BY_INDEX = {}
for n in range(1, 21):
    ch = os.environ.get(f"TG{n}_CHANNEL")
    if ch:
        CHANNELS_BY_INDEX[n] = ch

if not CHANNELS_BY_INDEX:
    print("–û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω –Ω–∏ –æ–¥–∏–Ω TG{n}_CHANNEL (–Ω–∞–ø—Ä–∏–º–µ—Ä, TG1_CHANNEL).")
    exit(1)

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å–ø–∏—Å–æ–∫ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏ —Ñ–ª–∞–≥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
accounts = [{"index": i, "channel": ch} for i, ch in sorted(CHANNELS_BY_INDEX.items())]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ ‚Äî –ø–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—é REQUIRE_PROXY (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
if REQUIRE_PROXY and not GLOBAL_PROXY:
    logging.error(
        "–ü—Ä–æ–∫—Å–∏ –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏—Ç–µ TG_PROXY_TYPE/TG_PROXY_HOST/TG_PROXY_PORT "
        "(–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ TG_PROXY_USER/TG_PROXY_PASS/TG_PROXY_RDNS) ‚Äî "
        "–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ REQUIRE_PROXY=0, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏."
    )
    exit(1)
elif not GLOBAL_PROXY:
    logging.warning("REQUIRE_PROXY=0 ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REFRESH_SECONDS = int(os.environ.get("REFRESH_SECONDS", 30))

# --- Validation tunables (speed up startup; override via env) ---
VALIDATION_CONNECT_TIMEOUT = int(os.environ.get("VALIDATION_CONNECT_TIMEOUT", "30"))
VALIDATION_AUTH_TIMEOUT = int(os.environ.get("VALIDATION_AUTH_TIMEOUT", "20"))
VALIDATION_DISCONNECT_TIMEOUT = int(os.environ.get("VALIDATION_DISCONNECT_TIMEOUT", "10"))
VALIDATION_CONCURRENCY = int(os.environ.get("VALIDATION_CONCURRENCY", "5"))

# --- Telethon network tunables (override via env) ---
TELETHON_REQUEST_RETRIES = int(os.environ.get("TELETHON_REQUEST_RETRIES", "7"))
TELETHON_CONNECTION_RETRIES = int(os.environ.get("TELETHON_CONNECTION_RETRIES", "6"))
TELETHON_RETRY_DELAY = int(os.environ.get("TELETHON_RETRY_DELAY", "3"))
TELETHON_TIMEOUT = int(os.environ.get("TELETHON_TIMEOUT", "45"))
TELETHON_FLOOD_SLEEP_THRESHOLD = int(os.environ.get("TELETHON_FLOOD_SLEEP_THRESHOLD", "60"))

# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–û–í ---

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
try:
    credentials_json = json.loads(base64.b64decode(GOOGLE_CREDS_JSON))
    gc = gspread.service_account_from_dict(credentials_json)
    sheet = gc.open_by_key(GSHEET_ID)
    worksheet = sheet.sheet1
except Exception as e:
    print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDS_JSON –∏ GSHEET_ID. {e}")
    exit()

# –ö—ç—à –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ -> –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
try:
    header_row = worksheet.row_values(1)
    HEADER_TO_COL = {name.strip(): idx for idx, name in enumerate(header_row, start=1)}
except Exception as e:
    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞: {e}")
    HEADER_TO_COL = {}

# –ê–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (—á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ '1', '2', ...)
try:
    SENT_FLAG_INDICES = sorted(
        int(name) for name in HEADER_TO_COL.keys() if str(name).strip().isdigit()
    )
    if not SENT_FLAG_INDICES:
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–ª–∞–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.")
except Exception as e:
    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")
    SENT_FLAG_INDICES = []

# Fallback: –µ—Å–ª–∏ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–ª–∞–≥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ, —à–ª—ë–º –≤–æ –í–°–ï –∫–∞–Ω–∞–ª—ã
if not SENT_FLAG_INDICES:
    SENT_FLAG_INDICES = [acc["index"] for acc in accounts]

def get_col_index(name: str):
    idx = HEADER_TO_COL.get(name)
    if not idx:
        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{name}' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã.")
    return idx

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ê—Ä–º–µ–Ω–∏—è)
tz = pytz.timezone("Asia/Yerevan")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Telegram (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤)
clients = []
common_proxy = GLOBAL_PROXY
client = TelegramClient(
    StringSession(TG_SESSION),
    TG_API_ID,
    TG_API_HASH,
    proxy=common_proxy,
    connection=tl_connection.ConnectionTcpAbridged,  # –∏–∑–±–µ–≥–∞–µ–º tcpfull
    request_retries=TELETHON_REQUEST_RETRIES,
    connection_retries=TELETHON_CONNECTION_RETRIES,
    retry_delay=TELETHON_RETRY_DELAY,
    timeout=TELETHON_TIMEOUT,
    flood_sleep_threshold=TELETHON_FLOOD_SLEEP_THRESHOLD,
)
clients.append(client)

# –£–¥–æ–±–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É (–≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–ª–∏–µ–Ω—Ç)
ACC_BY_INDEX = {acc["index"]: acc for acc in accounts}
CLIENT_BY_INDEX = {i: client for i in ACC_BY_INDEX.keys()}

# Runtime de-duplication guard: prevent repeating sends if Google Sheets flag update lags
SENT_RUNTIME = set()  # stores tuples of (row_idx, acc_idx)

# --- 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï EMOJI –ò –ü–ê–†–°–ï–† + –¢–ò–ü–û–ì–†–ê–§–ò–ö–ê ---

class CustomHtml:
    @staticmethod
    def parse(text):
        text, entities = tl_html.parse(text)
        for i, e in enumerate(entities):
            if isinstance(e, types.MessageEntityTextUrl) and e.url.startswith("emoji/"):
                emoji_id = int(e.url.split("/", 1)[1])
                entities[i] = types.MessageEntityCustomEmoji(e.offset, e.length, document_id=emoji_id)
        return text, entities

    @staticmethod
    def unparse(text, entities):
        for i, e in enumerate(entities or []):
            if isinstance(e, types.MessageEntityCustomEmoji):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, url=f"emoji/{e.document_id}")
        return tl_html.unparse(text, entities)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
for _c in clients:
    _c.parse_mode = CustomHtml()

emoji_ids = {
    1: 5467538555158943525,   # üí≠ (left)
    2: 5467538555158943525,   # üí≠ (right)
    3: 5217822164362739968,   # üëë
    8: 5325547803936572038,   # ‚ú® (left)
    9: 5325547803936572038,   # ‚ú® (right)
    10: 5409048419211682843,  # üíµ (left)
    11: 5409048419211682843,  # üíµ (right)
    12: 5456140674028019486,  # ‚ö°Ô∏è (left)
    13: 5456140674028019486,  # ‚ö°Ô∏è (right)
    14: 5334998226636390258,  # üì±
    15: 5334544901428229844,  # ‚ÑπÔ∏è (info)
}

emoji_placeholders = {
    1: "üí≠",  2: "üí≠",
    3: "üëë",
    8: "‚ú®",  9: "‚ú®",
    10: "üíµ", 11: "üíµ",
    12: "‚ö°Ô∏è", 13: "‚ö°Ô∏è",
    14: "üì±",
    15: "‚ÑπÔ∏è",
}

# Custom set of emojis for the "–§–æ—Ç–æ" checks line
FOTO_EMOJI_IDS = [
    5370853949358218655,
    5370674552869232639,
    5372943137415111238,
    5373338978780979795,
    5372991528811635071,
]

# –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ—Ä–æ–Ω—ã
CROWN_OFFSET_ADJUST = int(os.environ.get("CROWN_OFFSET_ADJUST", "0"))
CROWN_OFFSET_SCALE = float(os.environ.get("CROWN_OFFSET_SCALE", "1.25"))
CROWN_THIN = "\u2009"  # —Ç–æ–Ω–∫–∏–π –ø—Ä–æ–±–µ–ª –ë–ï–ó word-joiner ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –∫–æ—Ä–æ–Ω—ã
NNBSP = "\u202F"       # —É–∑–∫–∏–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
WORD_JOINER = "\u2060" # WORD JOINER
THIN  = "\u2009" + WORD_JOINER
CROWN_OFFSET_ADJUST = int(os.environ.get("CROWN_OFFSET_ADJUST", "0"))
CROWN_OFFSET_SCALE = float(os.environ.get("CROWN_OFFSET_SCALE", "1.25"))

# Pixel-based width helpers
CROWN_FONT_PATH = os.environ.get("CROWN_FONT_PATH", "")
CROWN_FONT_SIZE = int(os.environ.get("CROWN_FONT_SIZE", "18"))
CROWN_EM_WIDTH_SCALE = float(os.environ.get("CROWN_EM_WIDTH_SCALE", "1.0"))
CROWN_OFFSET_PX_ADJUST = int(os.environ.get("CROWN_OFFSET_PX_ADJUST", "0"))
CROWN_PRESET = os.environ.get("CROWN_PRESET", "").lower()  # e.g. "ios"
CROWN_FINE_TUNE = os.environ.get("CROWN_FINE_TUNE", "thin").lower()  # "thin" | "none"

if CROWN_PRESET == "ios":
    if "CROWN_EM_WIDTH_SCALE" not in os.environ:
        CROWN_EM_WIDTH_SCALE = 0.96
    if "CROWN_OFFSET_PX_ADJUST" not in os.environ:
        CROWN_OFFSET_PX_ADJUST = 1
_CROWN_FONT_SOURCE = None

def _load_crown_font():
    global _CROWN_FONT_SOURCE
    if not _PIL_AVAILABLE:
        return None
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
    except Exception:
        script_dir = os.getcwd()
    paths_to_try = [p for p in [CROWN_FONT_PATH] if p]
    paths_to_try += [
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
        "/usr/share/fonts/dejavu/DejaVuSans.ttf",
        "/usr/local/share/fonts/DejaVuSans.ttf",
        os.path.join(script_dir, "fonts", "DejaVuSans.ttf"),
        os.path.join(script_dir, "fonts", "dejavu", "DejaVuSans.ttf"),
        "./fonts/DejaVuSans.ttf",
        "fonts/DejaVuSans.ttf",
    ]
    for d in [os.path.join(script_dir, "fonts"), "./fonts", "fonts"]:
        try:
            if os.path.isdir(d):
                for fname in os.listdir(d):
                    if fname.lower().endswith(".ttf"):
                        p = os.path.join(d, fname)
                        if p not in paths_to_try:
                            paths_to_try.append(p)
        except Exception:
            pass
    for p in paths_to_try:
        try:
            if p and os.path.exists(p):
                if CROWN_FONT_PATH and os.path.abspath(p) == os.path.abspath(CROWN_FONT_PATH):
                    _CROWN_FONT_SOURCE = f"env:{p}"
                elif os.path.abspath(p).startswith(os.path.abspath(script_dir)) or p.startswith("./") or p.startswith("fonts"):
                    _CROWN_FONT_SOURCE = f"local:{p}"
                else:
                    _CROWN_FONT_SOURCE = f"system:{p}"
                return ImageFont.truetype(p, CROWN_FONT_SIZE)
        except Exception:
            pass
    try:
        print("[CROWN] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–ª–∏–¥–Ω—ã–π TTF. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—É—Ç–∏:")
        for p in paths_to_try:
            print("   -", p)
    except Exception:
        pass
    return None

_CROWN_FONT = _load_crown_font()

if _PIL_AVAILABLE and _CROWN_FONT:
    if hasattr(_CROWN_FONT, "getlength"):
        _CROWN_MEASURE_MODE = "Pillow.getlength"
    else:
        _CROWN_MEASURE_MODE = "Pillow.getbbox"
    print(f"[CROWN] Pixel measurement ENABLED via Pillow ({_CROWN_MEASURE_MODE}); font={_CROWN_FONT_SOURCE}; size={CROWN_FONT_SIZE}")
else:
    print("–û–®–ò–ë–ö–ê: –ø–∏–∫—Å–µ–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∫–æ—Ä–æ–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (Pillow/—à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã). –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π TTF-—à—Ä–∏—Ñ—Ç (–Ω–∞–ø—Ä., DejaVuSans.ttf); –∑–∞–≥—Ä—É–∑–∫–∞ ImageFont.load_default() –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —à—Ä–∏—Ñ—Ç –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ CROWN_FONT_PATH. –ë–µ–∑ —ç—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫ –∑–∞–ø—Ä–µ—â—ë–Ω.")
    sys.exit(1)

print(f"[CROWN] Preset={CROWN_PRESET or 'default'}, fine_tune={CROWN_FINE_TUNE}")

_tag_re = re.compile(r"<[^>]+>")
def _strip_tags(s: str) -> str:
    return _tag_re.sub("", str(s or "")).strip()

def _text_width_px(s: str) -> int:
    plain = str(s or "")
    if _PIL_AVAILABLE and _CROWN_FONT:
        try:
            if hasattr(_CROWN_FONT, "getlength"):
                return int(round(_CROWN_FONT.getlength(plain)))
            bbox = _CROWN_FONT.getbbox(plain)
            return max(0, int(bbox[2] - bbox[0]))
        except Exception:
            pass
    return int(round(len(plain) * 7))

def _space_width_px(ch: str = NNBSP) -> int:
    if _PIL_AVAILABLE and _CROWN_FONT:
        try:
            if hasattr(_CROWN_FONT, "getlength"):
                return max(1, int(round(_CROWN_FONT.getlength(ch))))
            bbox = _CROWN_FONT.getbbox(ch)
            return max(1, int(bbox[2] - bbox[0]))
        except Exception:
            pass
    return 7

def _plain_len(s: str) -> int:
    txt = re.sub(r"<[^>]+>", "", str(s or "")).strip()
    return len(txt)

def crown_over_name_lines(name: str, crown_html: str):
    name_plain = _strip_tags(name)
    name_px = _text_width_px(name_plain)
    em_px = _space_width_px("M")
    crown_px = max(1, int(round(em_px * CROWN_EM_WIDTH_SCALE)))
    offset_px = max(0, int(round(name_px / 2 - crown_px / 2)))
    offset_px += CROWN_OFFSET_PX_ADJUST
    nnbsp_px = _space_width_px(NNBSP)
    n_spaces = max(0, int(offset_px // max(1, nnbsp_px)))
    leftover_px = max(0, int(offset_px - n_spaces * max(1, nnbsp_px)))
    thin_count = 0
    if CROWN_FINE_TUNE == "thin":
        thin_px = _space_width_px(CROWN_THIN)
        if thin_px > 0:
            thin_count = int(round(leftover_px / thin_px))
            thin_count = max(0, min(thin_count, 8))
    n_spaces += max(0, CROWN_OFFSET_ADJUST)
    indent = (NNBSP * n_spaces) + (CROWN_THIN * thin_count)
    line1 = f"{indent}{crown_html}"
    line2 = f"<b><i>{name}</i></b>"
    return line1, line2

# --- 4. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ü–û–°–¢–ê ---

async def send_post(record, row_idx, pending_indices=None):
    """–°–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
    status = record.get("–°—Ç–∞—Ç—É—Å", "")
    name = record.get("–ò–º—è", "")
    services = record.get("–£—Å–ª—É–≥–∏", "")
    extra_services = record.get("–î–æ–ø. —É—Å–ª—É–≥–∏", "")
    age = record.get("–í–æ–∑—Ä–∞—Å—Ç", "")
    height = record.get("–†–æ—Å—Ç", "")
    weight = record.get("–í–µ—Å", "")
    bust = record.get("–ì—Ä—É–¥—å", "")
    express_price = record.get("Express", "")
    incall_price = record.get("Incall", "")
    outcall_price = record.get("Outcall", "")
    whatsapp_link = record.get("WhatsApp", "")
    telegram_link = record.get("Telegram", "")
    note_text = record.get("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "")
    nationality_raw = record.get("–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "")
    nationality_flag = re.sub(r"\s+", "", str(nationality_raw or ""))

    # –¢—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö –º–µ–¥–∏–∞ (–∏–∑ —Å—Ç–æ–ª–±—Ü–∞ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"): –ø—É—Å—Ç–æ -> 4
    required_media_raw = record.get("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "")
    try:
        required_media_count = int(str(required_media_raw).strip())
        if required_media_count < 1:
            required_media_count = 1
    except Exception:
        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç 4
        required_media_count = 4
    if str(required_media_raw).strip() == "":
        required_media_count = 4

    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ: –±–µ–∑ WhatsApp –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º
    if not (whatsapp_link and str(whatsapp_link).strip()):
        _notify_skip(row_idx, "–Ø—á–µ–π–∫–∞ WhatsApp –ø—É—Å—Ç–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    # --- —Å–±–æ—Ä —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤ ---
    param_lines = []
    if age and str(age).strip():    param_lines.append(f"–í–æ–∑—Ä–∞—Å—Ç: {age}")
    if height and str(height).strip(): param_lines.append(f"–†–æ—Å—Ç: {height}")
    if weight and str(weight).strip(): param_lines.append(f"–í–µ—Å: {weight}")
    if bust and str(bust).strip():  param_lines.append(f"–ì—Ä—É–¥—å: {bust}")

    blocks = []
    # 1) –°—Ç–∞—Ç—É—Å
    blocks.append(
        f'<a href="emoji/{emoji_ids[1]}">{emoji_placeholders[1]}</a>{THIN}'
        f'<i>{status}</i>{THIN}'
        f'<a href="emoji/{emoji_ids[2]}">{emoji_placeholders[2]}</a>'
    )
    # 2) –ö–æ—Ä–æ–Ω–∫–∞ –Ω–∞–¥ –∏–º–µ–Ω–µ–º (2 —Å—Ç—Ä–æ–∫–∏)
    crown_html = f'<a href="emoji/{emoji_ids[3]}">{emoji_placeholders[3]}</a>'
    line1, line2 = crown_over_name_lines(name, crown_html)
    if nationality_flag:
        line2 = f"{line2}{THIN}{nationality_flag}"
    blocks.append("\n".join([line1, line2]))
    # 3) –§–æ—Ç–æ
    foto_checks = "".join(f'<a href="emoji/{eid}">‚úÖ</a>' for eid in FOTO_EMOJI_IDS)
    blocks.append(f'<b>–§–æ—Ç–æ{THIN}{foto_checks}</b>')
    # 4) –£—Å–ª—É–≥–∏/–î–æ–ø.—É—Å–ª—É–≥–∏
    services_lines = []
    if services and str(services).strip():
        services_lines += ["–£—Å–ª—É–≥–∏:", f'<b><i>{services}</i></b>']
    if extra_services and str(extra_services).strip():
        if services_lines:
            services_lines.append("")
        services_lines += ["–î–æ–ø. —É—Å–ª—É–≥–∏:", f'<b><i>{extra_services}</i></b>']
    if services_lines:
        inner = "\n".join(services_lines)
        blocks.append(f"<blockquote>{inner}</blockquote>")
    # 5) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    if param_lines:
        params_header = (
            f'<a href="emoji/{emoji_ids[8]}">{emoji_placeholders[8]}</a>{THIN}'
            f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã{THIN}'
            f'<a href="emoji/{emoji_ids[9]}">{emoji_placeholders[9]}</a>'
        )
        blocks.append(params_header + "\n" + '<b><i>' + "\n".join(param_lines) + '</i></b>')
    # 6) –¶–µ–Ω—ã
    def _fmt_price(val):
        try:
            num = float(str(val).replace(' ', '').replace(',', '.'))
            amount = int(round(num * 1000))  # –∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —Ç—ã—Å—è—á–∏ AMD
            return f"{format(amount, ',d').replace(',', '.')} AMD"
        except Exception:
            return f"{val} AMD"
    price_lines = []
    if express_price and str(express_price).strip(): price_lines.append(f"Express: {_fmt_price(express_price)}")
    if incall_price and str(incall_price).strip():  price_lines.append(f"Incall: {_fmt_price(incall_price)}")
    if outcall_price and str(outcall_price).strip(): price_lines.append(f"Outcall: {_fmt_price(outcall_price)}")
    if price_lines:
        price_header = (
            f'<a href="emoji/{emoji_ids[10]}">{emoji_placeholders[10]}</a>{THIN}'
            f'–¶–µ–Ω–∞{THIN}'
            f'<a href="emoji/{emoji_ids[11]}">{emoji_placeholders[11]}</a>'
        )
        blocks.append(price_header + "\n" + '<b><i>' + "\n".join(price_lines) + '</i></b>')
    # 6.5) –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if note_text and str(note_text).strip():
        note_header = (
            f'<a href="emoji/{emoji_ids[15]}">{emoji_placeholders[15]}</a>{THIN}'
            f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ{THIN}'
            f'<a href="emoji/{emoji_ids[15]}">{emoji_placeholders[15]}</a>'
        )
        blocks.append(note_header + "\n" + '<b><i>' + str(note_text).strip() + '</i></b>')
    # 7) –ü—Ä–∏–∑—ã–≤ + –∫–æ–Ω—Ç–∞–∫—Ç—ã
    cta_and_contacts = [
        f'<a href="emoji/{emoji_ids[12]}">{emoji_placeholders[12]}</a>'
        f'{THIN}<b><i>–ù–∞–∑–Ω–∞—á—å –≤—Å—Ç—Ä–µ—á—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</i></b>{THIN}'
        f'<a href="emoji/{emoji_ids[13]}">{emoji_placeholders[13]}</a>'
    ]
    if telegram_link and str(telegram_link).strip():
        cta_and_contacts.append(
            f'<a href="emoji/{emoji_ids[14]}">{emoji_placeholders[14]}</a>{THIN}'
            f'<a href="{telegram_link}"><b>–°–≤—è–∑—å –≤ Telegram</b></a>'
        )
    if whatsapp_link and str(whatsapp_link).strip():
        cta_and_contacts.append(
            f'<a href="emoji/{emoji_ids[14]}">{emoji_placeholders[14]}</a>{THIN}'
            f'<a href="{whatsapp_link}"><b>–°–≤—è–∑—å –≤ WhatsApp</b></a>'
        )
    blocks.append("\n".join(cta_and_contacts))

    message_html = "\n\n".join(blocks)

    # --- –º–µ–¥–∏–∞ ---
    media_column_headers = [f"–°—Å—ã–ª–∫–∞ {i}" for i in range(1, 11)]
    media_urls = []
    for header in media_column_headers:
        url = record.get(header)
        if url and isinstance(url, str) and url.startswith("http"):
            media_urls.append(url)
    if not media_urls:
        _notify_skip(row_idx, "–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    if media_urls and len(set(media_urls)) != len(media_urls):
        _notify_skip(row_idx, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(media_urls)} URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}.")
    media_data = []
    if media_urls:
        for url_idx, url in enumerate(media_urls, start=1):
            try:
                file_data, final_url, content_type = _download_with_ext_guess(url, row_idx, timeout=(5, 60))
                file_base = final_url.split("/")[-1].split("?")[0]
                if file_base and '.' in file_base:
                    file_name = file_base
                else:
                    if 'video' in content_type:
                        file_name = "video.mp4"
                    elif 'image' in content_type:
                        file_name = "image.jpg"
                    else:
                        _notify_media_issue(row_idx, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø {content_type} –¥–ª—è {final_url}. –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª ‚Ññ{url_idx} –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é.")
                        continue
                media_data.append((file_data, file_name))
            except Exception as e:
                _notify_media_issue(row_idx, f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ {url} ‚Äî {e}. –ü—Ä–æ–ø—É—Å–∫–∞—é —Ñ–∞–π–ª ‚Ññ{url_idx} –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é.")
                continue

    if not media_data:
        _notify_skip(row_idx, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –º–µ–¥–∏–∞. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—á–∏—Ö –º–µ–¥–∏–∞
    if len(media_data) < required_media_count:
        _notify_skip(row_idx, f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(media_data)} –º–µ–¥–∏–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {required_media_count}. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        return
    if len(media_data) != len(media_urls):
        tg_notify(f"‚ÑπÔ∏è –°—Ç—Ä–æ–∫–∞ {row_idx}: –∑–∞–≥—Ä—É–∑–∏–ª {len(media_data)}/{len(media_urls)} –º–µ–¥–∏–∞, –ø—Ä–æ–¥–æ–ª–∂–∞—é —Å —É—Å–ø–µ—à–Ω—ã–º–∏.")

    # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
    if pending_indices is None:
        # –ë–µ–∑ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –∫—Ä–æ–º–µ —Ç–µ—Ö, –≥–¥–µ —Å—Ç–æ–ª–±–µ—Ü –µ—Å—Ç—å –∏ —Ç–∞–º TRUE
        target_indexes = [
            i for i, acc in ACC_BY_INDEX.items()
            if acc.get("channel") and str(record.get(str(i), record.get(i, ""))).upper() != "TRUE"
        ]
    else:
        target_indexes = [i for i in pending_indices if i in ACC_BY_INDEX and ACC_BY_INDEX[i].get("channel")]

    clients_with_channels = [(CLIENT_BY_INDEX[i], ACC_BY_INDEX[i]) for i in sorted(target_indexes)]

    async def _send_to_one(client, acc):
        channel_str = acc.get("channel")
        acc_idx = acc.get("index")
        rt_key = (row_idx, acc_idx)
        if rt_key in SENT_RUNTIME:
            return acc_idx, channel_str, True, "runtime-dup-skip"
        if not channel_str:
            return acc_idx, channel_str, False, "no_channel"

        try:
            if not client.is_connected():
                await client.connect()
        except Exception as e:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: TG{acc_idx} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return acc_idx, channel_str, False, f"connect: {e}"

        try:
            try:
                channel = int(channel_str)
            except (ValueError, TypeError):
                channel = channel_str

            if media_data:
                file_objs = []
                for data, fname in media_data:
                    bio = io.BytesIO(data); bio.name = fname; file_objs.append(bio)
                await client.send_file(
                    channel, file_objs, caption=message_html,
                    supports_streaming=True, parse_mode=CustomHtml()
                )
            else:
                await client.send_message(
                    channel, message_html, parse_mode=CustomHtml()
                )

            # –æ—Ç–º–µ—Ç–∏—Ç—å —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            flag_name = str(acc_idx)
            col_idx = get_col_index(flag_name)
            if col_idx:
                try:
                    worksheet.update_cell(row_idx, col_idx, "TRUE")
                except Exception as e_upd:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ {flag_name} (—Å—Ç—Ä–æ–∫–∞ {row_idx}): {e_upd}")
            SENT_RUNTIME.add(rt_key)
            return acc_idx, channel_str, True, None

        except (tl_errors.FloodWaitError, tl_errors.SlowModeWaitError) as e:
            logging.error(f"TG{acc_idx} –ª–∏–º–∏—Ç Telegram: {e}", exc_info=True)
            return acc_idx, channel_str, False, f"rate: {e}"
        except Exception as e:
            logging.error(f"TG{acc_idx} –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}. –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä...", exc_info=True)
            try:
                await client.disconnect()
            except Exception:
                pass
            try:
                await client.connect()
                if media_data:
                    file_objs = []
                    for data, fname in media_data:
                        bio = io.BytesIO(data); bio.name = fname; file_objs.append(bio)
                    await client.send_file(
                        channel, file_objs, caption=message_html,
                        supports_streaming=True, parse_mode=CustomHtml()
                    )
                else:
                    await client.send_message(
                        channel, message_html, parse_mode=CustomHtml()
                    )
                flag_name = str(acc_idx)
                col_idx = get_col_index(flag_name)
                if col_idx:
                    try:
                        worksheet.update_cell(row_idx, col_idx, "TRUE")
                    except Exception as e_upd:
                        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ {flag_name} (—Å—Ç—Ä–æ–∫–∞ {row_idx}): {e_up–¥}")
                SENT_RUNTIME.add(rt_key)
                return acc_idx, channel_str, True, None
            except Exception as e2:
                logging.error(f"TG{acc_idx} –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}", exc_info=True)
                return acc_idx, channel_str, False, f"retry: {e2}"

    results = await asyncio.gather(
        *[_send_to_one(client, acc) for (client, acc) in clients_with_channels],
        return_exceptions=False
    )

    ok = sum(1 for (_, _, s, _) in results if s)
    fail = [(i, ch, err) for (i, ch, s, err) in results if not s]
    print(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –ø–µ—Ä—Å-–æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ {ok}/{len(clients_with_channels)}. –ù–µ—É–¥–∞—á–∏: {fail}")

    if fail:
        tg_notify(f"‚ùóÔ∏è–°—Ç—Ä–æ–∫–∞ {row_idx}: {ok}/{len(clients_with_channels)} —É—Å–ø–µ—à–Ω–æ.\n–ü—Ä–æ–±–ª–µ–º—ã: {fail}")

    # –ï—Å–ª–∏ –±—ã–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ‚Äî –æ—Ç–º–µ—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    if ok > 0:
        for fname in ("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"):
            col_idx = get_col_index(fname)
            if col_idx:
                try:
                    worksheet.update_cell(row_idx, col_idx, "TRUE")
                    break  # –ø–æ–º–µ—Ç–∏–ª–∏ –ª—é–±–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏
                except Exception as e_upd:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ '{fname}' (—Å—Ç—Ä–æ–∫–∞ {row_idx}): {e_upd}")

# --- 4.5. –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–ï–°–°–ò–ô (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞) ---

async def validate_sessions_before_start():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–±—â–∏–π StringSession –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–∞–π–º–∞—É—Ç—ã,
    —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ—Ç—å –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π —Å–µ—Ç–∏/–ø—Ä–æ–∫—Å–∏.
    """
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ Telegram... (–æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç)")
    client = clients[0]
    try:
        if not client.is_connected():
            await asyncio.wait_for(client.connect(), timeout=int(VALIDATION_CONNECT_TIMEOUT))
        authed = await asyncio.wait_for(client.is_user_authorized(), timeout=int(VALIDATION_AUTH_TIMEOUT))
        if not authed:
            logging.error("–°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å TG_SESSION.")
            exit(1)
        print("TG: OK")
    except asyncio.TimeoutError:
        logging.error(f"Timeout –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏ ({VALIDATION_CONNECT_TIMEOUT + VALIDATION_AUTH_TIMEOUT}s)")
        exit(1)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
        exit(1)
    finally:
        try:
            await asyncio.wait_for(client.disconnect(), timeout=int(VALIDATION_DISCONNECT_TIMEOUT))
        except Exception:
            pass

# --- 5. –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if not clients:
        print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω Telegram –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TG_API_ID/TG_API_HASH –∏ TG_SESSION/TG{n}_CHANNEL.")
        return

    await validate_sessions_before_start()

    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    results = await asyncio.gather(*(c.start() for c in clients), return_exceptions=True)
    for idx, res in enumerate(results, start=1):
        if isinstance(res, Exception):
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –∫–ª–∏–µ–Ω—Ç #{idx} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {res}")
    print("–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
    tg_notify("üöÄ telethon-–ø–æ—Å—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ Google Sheets")

    while True:
        try:
            alive = sum(1 for c in clients if c.is_connected())
            # Proactive reconnect sweep
            seen = set()
            for acc_idx, client in CLIENT_BY_INDEX.items():
                key = id(client)
                if key in seen:
                    continue
                seen.add(key)
                if not client.is_connected():
                    try:
                        await client.connect()
                        print("TG –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω.")
                    except Exception as e:
                        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±—â–∏–π –∫–ª–∏–µ–Ω—Ç: {e}")
            print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {alive}/{len(clients)}")
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã... {datetime.now(tz).strftime('%H:%M:%S')}")
            records = worksheet.get_all_records()
            now = datetime.now(tz)

            for idx, record in enumerate(records, start=2):
                if not str(record.get("–ò–º—è", "")).strip():
                    continue

                # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": –µ—Å–ª–∏ TRUE ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
                sent_flag = record.get("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", record.get("–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", ""))
                if str(sent_flag).strip().upper() == "TRUE":
                    continue

                # –í–ê–ñ–ù–û: –±–µ—Ä—ë–º –í–°–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
                active_idx = [acc["index"] for acc in accounts if acc.get("channel")]
                if not active_idx:
                    continue

                # –ö–∞–Ω–∞–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Ç–∞–º TRUE
                pending_idx = []
                for i in active_idx:
                    cell_val = record.get(str(i), record.get(i, ""))
                    if str(cell_val).upper() != "TRUE":
                        pending_idx.append(i)

                if not pending_idx:
                    continue
                print(f"–°—Ç—Ä–æ–∫–∞ {idx}: –∫–∞–Ω–∞–ª—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ -> {pending_idx}")

                time_str = record.get("–í—Ä–µ–º—è")
                if not time_str:
                    continue

                try:
                    sched_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
                    sched_time = tz.localize(sched_time)

                    if sched_time <= now:
                        print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}.")
                        await send_post(record, idx, pending_indices=pending_idx)

                except ValueError:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: '{time_str}'. –û–∂–∏–¥–∞–µ—Ç—Å—è '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°'.")
                except Exception as e:
                    print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")

            await asyncio.sleep(REFRESH_SECONDS)

        except gspread.exceptions.APIError as e:
            logging.error(f"–û–®–ò–ë–ö–ê API Google Sheets: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {REFRESH_SECONDS} —Å–µ–∫.", exc_info=True)
            await asyncio.sleep(REFRESH_SECONDS)
        except Exception as e:
            logging.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
            await asyncio.sleep(REFRESH_SECONDS)

# --- 6. –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ---

if __name__ == "__main__":
    asyncio.run(main())