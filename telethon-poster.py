import asyncio
import base64
import json
import os
import re
from datetime import datetime
import pytz
import requests
import io
import gspread
import sys
import logging
from telethon.network import connection as tl_connection
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.extensions import html as tl_html
from telethon import types
import telethon.errors as tl_errors
from dotenv import load_dotenv

# Optional: pixel-accurate text width via Pillow (recommended on render.com)
try:
    from PIL import ImageFont
    _PIL_AVAILABLE = True
except Exception:
    _PIL_AVAILABLE = False


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Mute noisy Telethon reconnect logs like "Server closed the connection" unless explicitly overridden
LOG_LEVEL = os.environ.get("TELETHON_LOG_LEVEL", "ERROR").upper()
try:
    logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
    logging.getLogger("telethon").setLevel(getattr(logging, LOG_LEVEL, logging.ERROR))
    logging.getLogger("telethon.network").setLevel(getattr(logging, LOG_LEVEL, logging.ERROR))
    logging.getLogger("telethon.network.mtprotosender").setLevel(getattr(logging, LOG_LEVEL, logging.ERROR))
except Exception:
    pass

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–µ—Ä—Å–∏–∏ Python (Telethon –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ –Ω–∞ Python 3.13)
if sys.version_info >= (3, 13):
    print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω Python 3.13+. –ò–∑–≤–µ—Å—Ç–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ asyncio —Å Telethon. "
          "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python 3.11‚Äì3.12 –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å Telethon –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.")

# --- 1. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---

# Google Sheets
GSHEET_ID = os.environ.get("GSHEET_ID")
GOOGLE_CREDS_JSON = os.environ.get("GOOGLE_CREDS_JSON")

# Telegram –∞–∫–∫–∞—É–Ω—Ç—ã: –æ–±—â–∏–π TG_API_ID/TG_API_HASH –∏ –ø–µ—Ä-–∞–∫–∫–∞—É–Ω—Ç–Ω—ã–µ TG{n}_SESSION, TG{n}_CHANNEL, –ø—Ä–æ–∫—Å–∏
accounts = []

# –û–±—â–∏–µ Telegram API –∫—Ä–µ–¥—ã (–µ–¥–∏–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
TG_API_ID_STR = os.environ.get("TG_API_ID")
TG_API_HASH = os.environ.get("TG_API_HASH")

if not TG_API_ID_STR or not TG_API_HASH:
    print("–û–®–ò–ë–ö–ê: –£–∫–∞–∂–∏—Ç–µ –æ–±—â–∏–µ TG_API_ID –∏ TG_API_HASH –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)
try:
    TG_API_ID = int(TG_API_ID_STR)
except Exception:
    print("–û–®–ò–ë–ö–ê: TG_API_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    exit(1)

for n in range(1, 21):
    session = os.environ.get(f"TG{n}_SESSION")
    channel = os.environ.get(f"TG{n}_CHANNEL")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∫—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    p_type = os.environ.get(f"TG{n}_PROXY_TYPE")      # –Ω–∞–ø—Ä–∏–º–µ—Ä: 'socks5' –∏–ª–∏ 'http'
    host = os.environ.get(f"TG{n}_PROXY_HOST")
    port_str = os.environ.get(f"TG{n}_PROXY_PORT")
    rdns_str = os.environ.get(f"TG{n}_PROXY_RDNS", "true")
    user = os.environ.get(f"TG{n}_PROXY_USER")
    password = os.environ.get(f"TG{n}_PROXY_PASS")

    # –°–±–æ—Ä–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
    proxy = None
    if p_type and host and port_str:
        try:
            port = int(port_str)
        except Exception:
            port = None
        if port:
            rdns = str(rdns_str).lower() in ("1", "true", "yes", "y", "on")
            proxy = (p_type, host, port, rdns, user, password)

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –±–µ–∑ —Å–µ—Å—Å–∏–∏/–∫–∞–Ω–∞–ª–∞
    if not (session or channel):
        continue

    accounts.append({
        "index": n,
        "api_id": TG_API_ID,
        "api_hash": TG_API_HASH,
        "session": session,
        "channel": channel,
        "proxy": proxy,
    })

# –¢—Ä–µ–±—É–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ë–µ–∑ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
missing_proxy = [acc["index"] for acc in accounts if not acc.get("proxy")]
if missing_proxy:
    acc_list = ", ".join(f"TG{n}" for n in missing_proxy)
    print(
        f"–û–®–ò–ë–ö–ê: –î–ª—è {acc_list} –Ω–µ –∑–∞–¥–∞–Ω –ø—Ä–æ–∫—Å–∏. "
        f"–£–∫–∞–∂–∏—Ç–µ TG{{n}}_PROXY_TYPE, TG{{n}}_PROXY_HOST, TG{{n}}_PROXY_PORT "
        f"(–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ TG{{n}}_PROXY_USER, TG{{n}}_PROXY_PASS, TG{{n}}_PROXY_RDNS)."
    )
    exit(1)

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
REFRESH_SECONDS = int(os.environ.get("REFRESH_SECONDS", 30))

# --- 2. –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–û–í ---

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets
try:
    credentials_json = json.loads(base64.b64decode(GOOGLE_CREDS_JSON))
    gc = gspread.service_account_from_dict(credentials_json)
    sheet = gc.open_by_key(GSHEET_ID)
    worksheet = sheet.sheet1
except Exception as e:
    print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GOOGLE_CREDS_JSON –∏ GSHEET_ID. {e}")
    exit()

# –ö—ç—à –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ -> –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
try:
    header_row = worksheet.row_values(1)
    HEADER_TO_COL = {name.strip(): idx for idx, name in enumerate(header_row, start=1)}
except Exception as e:
    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ª–∏—Å—Ç–∞: {e}")
    HEADER_TO_COL = {}

# –ê–≤—Ç–æ-–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ (—á–∏—Å–ª–æ–≤—ã–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ '1', '2', ...)
try:
    SENT_FLAG_INDICES = sorted(
        int(name) for name in HEADER_TO_COL.keys() if str(name).strip().isdigit()
    )
    if not SENT_FLAG_INDICES:
        print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–ª–∞–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ.")
except Exception as e:
    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")
    SENT_FLAG_INDICES = []

def get_col_index(name: str):
    idx = HEADER_TO_COL.get(name)
    if not idx:
        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{name}' –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∞–±–ª–∏—Ü—ã.")
    return idx

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ê—Ä–º–µ–Ω–∏—è)
tz = pytz.timezone("Asia/Yerevan")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ Telegram (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
clients = []
for i, acc in enumerate(accounts):
    prx = acc.get("proxy")
    session_or_name = StringSession(acc["session"]) if acc["session"] else f"tg{i+1}_session"
    clients.append(
        TelegramClient(
            session_or_name,
            acc["api_id"],
            acc["api_hash"],
            proxy=prx,
            connection=tl_connection.ConnectionTcpAbridged,  # –∏–∑–±–µ–≥–∞–µ–º tcpfull
            request_retries=5,
            connection_retries=3,
            retry_delay=2,
            timeout=30,
            flood_sleep_threshold=60,
        )
    )

# –£–¥–æ–±–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É –∞–∫–∫–∞—É–Ω—Ç–∞
ACC_BY_INDEX = {acc["index"]: acc for acc in accounts}
CLIENT_BY_INDEX = {acc["index"]: c for c, acc in zip(clients, accounts)}

# Runtime de-duplication guard: prevent repeating sends if Google Sheets flag update lags
SENT_RUNTIME = set()  # stores tuples of (row_idx, acc_idx)

# --- 3. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï EMOJI –ò –ü–ê–†–°–ï–† + –¢–ò–ü–û–ì–†–ê–§–ò–ö–ê ---

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –≤ HTML
class CustomHtml:
    @staticmethod
    def parse(text):
        text, entities = tl_html.parse(text)
        for i, e in enumerate(entities):
            if isinstance(e, types.MessageEntityTextUrl) and e.url.startswith("emoji/"):
                emoji_id = int(e.url.split("/", 1)[1])
                entities[i] = types.MessageEntityCustomEmoji(e.offset, e.length, document_id=emoji_id)
        return text, entities

    @staticmethod
    def unparse(text, entities):
        for i, e in enumerate(entities or []):
            if isinstance(e, types.MessageEntityCustomEmoji):
                entities[i] = types.MessageEntityTextUrl(e.offset, e.length, url=f"emoji/{e.document_id}")
        return tl_html.unparse(text, entities)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
for _c in clients:
    _c.parse_mode = CustomHtml()

# ID –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏
emoji_ids = {
    1: 5467538555158943525,   # üí≠ (left)
    2: 5467538555158943525,   # üí≠ (right)
    3: 5217822164362739968,   # üëë
    4: 5384225750213754731,   # ‚úÖ
    5: 5386698955591549040,   # ‚úÖ
    6: 5386434913887086602,   # ‚úÖ
    7: 5386675715523505193,   # ‚úÖ
    8: 5325547803936572038,   # ‚ú® (left)
    9: 5325547803936572038,   # ‚ú® (right)
    10: 5409048419211682843,  # üíµ (left)
    11: 5409048419211682843,  # üíµ (right)
    12: 5456140674028019486,  # ‚ö°Ô∏è (left)
    13: 5456140674028019486,  # ‚ö°Ô∏è (right)
    14: 5334998226636390258,  # üì±
}

# Unicode-–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–¥–µ
emoji_placeholders = {
    1: "üí≠",  2: "üí≠",
    3: "üëë",
    4: "‚úÖ",  5: "‚úÖ",  6: "‚úÖ",  7: "‚úÖ",
    8: "‚ú®",  9: "‚ú®",
    10: "üíµ", 11: "üíµ",
    12: "‚ö°Ô∏è", 13: "‚ö°Ô∏è",
    14: "üì±",
}

# –ü—Ä–æ–±–µ–ª—ã/–ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
NNBSP = "\u202F"   # —É–∑–∫–∏–π –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª (–¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –∫–æ—Ä–æ–Ω—ã)
THIN  = "\u2009"   # —Ç–æ–Ω–∫–∏–π –ø—Ä–æ–±–µ–ª (–∑–∞–∑–æ—Ä—ã –≤–æ–∫—Ä—É–≥ —ç–º–æ–¥–∑–∏)
CROWN_OFFSET_ADJUST = int(os.environ.get("CROWN_OFFSET_ADJUST", "0"))
CROWN_OFFSET_SCALE = float(os.environ.get("CROWN_OFFSET_SCALE", "1.25"))

# === Pixel-based width helpers (for precise crown centering) ===
# Configurable font and sizing (works on render.com). If font is missing, we fall back safely.
CROWN_FONT_PATH = os.environ.get("CROWN_FONT_PATH", "")  # e.g. ./fonts/DejaVuSans.ttf
CROWN_FONT_SIZE = int(os.environ.get("CROWN_FONT_SIZE", "18"))
# Scale factor for custom-emoji visual width relative to the font's 1em (tweak if crown looks off)
CROWN_EM_WIDTH_SCALE = float(os.environ.get("CROWN_EM_WIDTH_SCALE", "1.0"))
# Optional pixel adjustment (+/-) after centering math
CROWN_OFFSET_PX_ADJUST = int(os.environ.get("CROWN_OFFSET_PX_ADJUST", "0"))

# Device preset and fine-tune options for better mobile (iOS) rendering
CROWN_PRESET = os.environ.get("CROWN_PRESET", "").lower()  # e.g. "ios"
CROWN_FINE_TUNE = os.environ.get("CROWN_FINE_TUNE", "thin").lower()  # "thin" | "none"

# Apply iOS defaults only if user didn't explicitly override via env
if CROWN_PRESET == "ios":
    if "CROWN_EM_WIDTH_SCALE" not in os.environ:
        CROWN_EM_WIDTH_SCALE = 0.96  # iOS tends to render slightly wider vs 1em heuristic
    if "CROWN_OFFSET_PX_ADJUST" not in os.environ:
        CROWN_OFFSET_PX_ADJUST = 1   # nudge crown by ~1px to the right
_CROWN_FONT_SOURCE = None

# Lazy-load a font that supports Cyrillic on typical Linux containers
def _load_crown_font():
    global _CROWN_FONT_SOURCE
    if not _PIL_AVAILABLE:
        return None
    # Try env-provided font first
    paths_to_try = [p for p in [CROWN_FONT_PATH] if p]
    # Common Linux locations (present on many containers)
    paths_to_try += [
        "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
        "/usr/share/fonts/dejavu/DejaVuSans.ttf",
        "/usr/local/share/fonts/DejaVuSans.ttf",
    ]
    for p in paths_to_try:
        try:
            if p and os.path.exists(p):
                _CROWN_FONT_SOURCE = f"env:{p}" if p == CROWN_FONT_PATH and p else f"system:{p}"
                return ImageFont.truetype(p, CROWN_FONT_SIZE)
        except Exception:
            pass
    # Final fallback ‚Äì Pillow's default bitmap font (limited glyph coverage)
    try:
        _CROWN_FONT_SOURCE = "Pillow:load_default"
        return ImageFont.load_default()
    except Exception:
        return None

_CROWN_FONT = _load_crown_font()


if _PIL_AVAILABLE and _CROWN_FONT:
    if hasattr(_CROWN_FONT, "getlength"):
        _CROWN_MEASURE_MODE = "Pillow.getlength"
    else:
        _CROWN_MEASURE_MODE = "Pillow.getbbox"
    print(f"[CROWN] Pixel measurement ENABLED via Pillow ({_CROWN_MEASURE_MODE}); font={_CROWN_FONT_SOURCE}; size={CROWN_FONT_SIZE}")
else:
    print("[CROWN] Pixel measurement DISABLED; using heuristic width (~7 px/char).")

print(f"[CROWN] Preset={CROWN_PRESET or 'default'}, fine_tune={CROWN_FINE_TUNE}")

_tag_re = re.compile(r"<[^>]+>")

def _strip_tags(s: str) -> str:
    return _tag_re.sub("", str(s or "")).strip()

# Approximate text width in pixels using the selected font; safe fallback if PIL/font is unavailable
def _text_width_px(s: str) -> int:
    plain = str(s or "")
    if _PIL_AVAILABLE and _CROWN_FONT:
        try:
            if hasattr(_CROWN_FONT, "getlength"):
                return int(round(_CROWN_FONT.getlength(plain)))
            # Older Pillow fallback
            bbox = _CROWN_FONT.getbbox(plain)
            return max(0, int(bbox[2] - bbox[0]))
        except Exception:
            pass
    # Heuristic fallback (~7 px per character)
    return int(round(len(plain) * 7))

# Width of a space-like character (NNBSP by default) in pixels
def _space_width_px(ch: str = NNBSP) -> int:
    if _PIL_AVAILABLE and _CROWN_FONT:
        try:
            if hasattr(_CROWN_FONT, "getlength"):
                return max(1, int(round(_CROWN_FONT.getlength(ch))))
            bbox = _CROWN_FONT.getbbox(ch)
            return max(1, int(bbox[2] - bbox[0]))
        except Exception:
            pass
    return 7  # heuristic fallback

def _plain_len(s: str) -> int:
    """–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è '—à–∏—Ä–∏–Ω–∞' –∏–º–µ–Ω–∏: —É–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –∏ —Å—á–∏—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã."""
    txt = re.sub(r"<[^>]+>", "", str(s or "")).strip()
    return len(txt)

def crown_over_name_lines(name: str, crown_html: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–≤–µ —Å—Ç—Ä–æ–∫–∏: (1) –∫–æ—Ä–æ–Ω–∞ —Å –∞–≤—Ç–æ–æ—Ç—Å—Ç—É–ø–æ–º, (2) –∏–º—è.
    –°–º–µ—â–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (—á–µ—Ä–µ–∑ Pillow, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ).
    –ù–∞ render.com —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –∫–æ—Ä–æ–±–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ Pillow –∏ —à—Ä–∏—Ñ—Ç–∞; –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–ª–±—ç–∫.
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ ENV:
      - CROWN_FONT_PATH: –ø—É—Ç—å –∫ .ttf (–Ω–∞–ø—Ä–∏–º–µ—Ä, DejaVuSans.ttf)
      - CROWN_FONT_SIZE: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ px (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 18)
      - CROWN_EM_WIDTH_SCALE: –º–Ω–æ–∂–∏—Ç–µ–ª—å —à–∏—Ä–∏–Ω—ã —ç–º–æ–¥–∑–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ 1em
      - CROWN_OFFSET_PX_ADJUST: —Ä—É—á–Ω–∞—è –ø–∏–∫—Å–µ–ª—å–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ —Å–º–µ—â–µ–Ω–∏—è
    """
    name_plain = _strip_tags(name)

    # –®–∏—Ä–∏–Ω–∞ –∏–º–µ–Ω–∏ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    name_px = _text_width_px(name_plain)

    # –û—Ü–µ–Ω–∫–∞ —à–∏—Ä–∏–Ω—ã "—ç–º–æ–¥–∑–∏-–∫–æ—Ä–æ–Ω—ã" –≤ –ø–∏–∫—Å–µ–ª—è—Ö: –±–µ—Ä—ë–º 1em (—à–∏—Ä–∏–Ω—É —Å–∏–º–≤–æ–ª–∞ "M") –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
    em_px = _space_width_px("M")  # 1em approximately
    crown_px = max(1, int(round(em_px * CROWN_EM_WIDTH_SCALE)))

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ–Ω—É –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏–º–µ–Ω–∏
    offset_px = max(0, int(round(name_px / 2 - crown_px / 2)))

    # –†—É—á–Ω–∞—è –ø–æ–¥—Å—Ç—Ä–æ–π–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —Å–¥–≤–∏–Ω—É—Ç—å)
    offset_px += CROWN_OFFSET_PX_ADJUST

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∏–∫—Å–µ–ª–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–∫–∏—Ö –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    nnbsp_px = _space_width_px(NNBSP)
    # Coarse step by narrow NBSP
    n_spaces = max(0, int(offset_px // max(1, nnbsp_px)))
    leftover_px = max(0, int(offset_px - n_spaces * max(1, nnbsp_px)))

    # Fine-tune with THIN spaces (smaller width) to better match iOS rendering
    thin_count = 0
    if CROWN_FINE_TUNE == "thin":
        thin_px = _space_width_px(THIN)
        if thin_px > 0:
            thin_count = int(round(leftover_px / thin_px))
            thin_count = max(0, min(thin_count, 8))  # cap to avoid overshoot

    # Backward-compatible manual adjust in units of NNBSP
    n_spaces += max(0, CROWN_OFFSET_ADJUST)

    indent = (NNBSP * n_spaces) + (THIN * thin_count)
    line1 = f"{indent}{crown_html}"
    line2 = f"<b><i>{name}</i></b>"
    return line1, line2

# --- 4. –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –ü–û–°–¢–ê ---

async def send_post(record, row_idx, pending_indices=None):
    """–°–æ–±–∏—Ä–∞–µ—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã."""
    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø–∏—Å–∏
    status = record.get("–°—Ç–∞—Ç—É—Å", "")
    name = record.get("–ò–º—è", "")
    services = record.get("–£—Å–ª—É–≥–∏", "")
    extra_services = record.get("–î–æ–ø. —É—Å–ª—É–≥–∏", "")
    age = record.get("–í–æ–∑—Ä–∞—Å—Ç", "")
    height = record.get("–†–æ—Å—Ç", "")
    weight = record.get("–í–µ—Å", "")
    bust = record.get("–ì—Ä—É–¥—å", "")
    express_price = record.get("Express", "")
    incall_price = record.get("Incall", "")
    outcall_price = record.get("Outcall", "")
    whatsapp_link = record.get("WhatsApp", "")
    telegram_link = record.get("Telegram", "")

    # --- —Å–±–æ—Ä —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–æ–≤ ---
    param_lines = []
    if age and str(age).strip():    param_lines.append(f"–í–æ–∑—Ä–∞—Å—Ç - {age}")
    if height and str(height).strip(): param_lines.append(f"–†–æ—Å—Ç - {height}")
    if weight and str(weight).strip(): param_lines.append(f"–í–µ—Å - {weight}")
    if bust and str(bust).strip():  param_lines.append(f"–ì—Ä—É–¥—å - {bust}")

    # –ë–ª–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ ‚Äî —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
    blocks = []

    # 1) –°—Ç–∞—Ç—É—Å
    blocks.append(
        f'<a href="emoji/{emoji_ids[1]}">{emoji_placeholders[1]}</a>{THIN}'
        f'<i>{status}</i>{THIN}'
        f'<a href="emoji/{emoji_ids[2]}">{emoji_placeholders[2]}</a>'
    )

    # 2) –ö–æ—Ä–æ–Ω–∫–∞ –Ω–∞–¥ –∏–º–µ–Ω–µ–º (2 —Å—Ç—Ä–æ–∫–∏)
    crown_html = f'<a href="emoji/{emoji_ids[3]}">{emoji_placeholders[3]}</a>'
    line1, line2 = crown_over_name_lines(name, crown_html)
    blocks.append("\n".join([line1, line2]))

    # 3) –§–æ—Ç–æ
    foto_checks = "".join(f'<a href="emoji/{emoji_ids[i]}">{emoji_placeholders[i]}</a>' for i in range(4, 8))
    blocks.append(f'<b>–§–æ—Ç–æ{THIN}{foto_checks}</b>')

    # 4) –£—Å–ª—É–≥–∏/–î–æ–ø.—É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    services_lines = []
    if services and str(services).strip():
        services_lines += ["–£—Å–ª—É–≥–∏:", f'<b><i>{services}</i></b>']
    if extra_services and str(extra_services).strip():
        if services_lines:
            services_lines.append("")   # –æ–¥–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
        services_lines += ["–î–æ–ø. —É—Å–ª—É–≥–∏:", f'<b><i>{extra_services}</i></b>']
    if services_lines:
        inner = "\n".join(services_lines)
        blocks.append(f"<blockquote>{inner}</blockquote>")

    # 5) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if param_lines:
        params_header = (
            f'<a href="emoji/{emoji_ids[8]}">{emoji_placeholders[8]}</a>{THIN}'
            f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã{THIN}'
            f'<a href="emoji/{emoji_ids[9]}">{emoji_placeholders[9]}</a>'
        )
        blocks.append(params_header + "\n" + '<b><i>' + "\n".join(param_lines) + '</i></b>')

    # 6) –¶–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    def _fmt_price(val):
        try:
            num = float(str(val).replace(' ', '').replace(',', '.'))
            amount = int(round(num * 1000))  # –∑–Ω–∞—á–µ–Ω–∏—è —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —Ç—ã—Å—è—á–∏ AMD
            return f"{format(amount, ',d').replace(',', '.')} AMD"
        except Exception:
            return f"{val} AMD"

    price_lines = []
    if express_price and str(express_price).strip(): price_lines.append(f"Express - {_fmt_price(express_price)}")
    if incall_price and str(incall_price).strip():  price_lines.append(f"Incall - {_fmt_price(incall_price)}")
    if outcall_price and str(outcall_price).strip(): price_lines.append(f"Outcall - {_fmt_price(outcall_price)}")
    if price_lines:
        price_header = (
            f'<a href="emoji/{emoji_ids[10]}">{emoji_placeholders[10]}</a>{THIN}'
            f'–¶–µ–Ω–∞{THIN}'
            f'<a href="emoji/{emoji_ids[11]}">{emoji_placeholders[11]}</a>'
        )
        blocks.append(price_header + "\n" + '<b><i>' + "\n".join(price_lines) + '</i></b>')

    # 7) –ü—Ä–∏–∑—ã–≤ + –∫–æ–Ω—Ç–∞–∫—Ç—ã (–ë–ï–ó –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏)
    cta_and_contacts = [
        f'<a href="emoji/{emoji_ids[12]}">{emoji_placeholders[12]}</a>'
        f'{THIN}<b><i>–ù–∞–∑–Ω–∞—á—å –≤—Å—Ç—Ä–µ—á—É —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!</i></b>{THIN}'
        f'<a href="emoji/{emoji_ids[13]}">{emoji_placeholders[13]}</a>'
    ]
    if telegram_link and str(telegram_link).strip():
        cta_and_contacts.append(
            f'<a href="emoji/{emoji_ids[14]}">{emoji_placeholders[14]}</a> '
            f'<a href="{telegram_link}"><b>–°–≤—è–∑—å –≤ Telegram</b></a>'
        )
    if whatsapp_link and str(whatsapp_link).strip():
        cta_and_contacts.append(
            f'<a href="emoji/{emoji_ids[14]}">{emoji_placeholders[14]}</a> '
            f'<a href="{whatsapp_link}"><b>–°–≤—è–∑—å –≤ WhatsApp</b></a>'
        )
    blocks.append("\n".join(cta_and_contacts))

    # --- —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–ª–µ–π–∫–∞: –û–î–ù–ê –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ ---
    message_html = "\n\n".join(blocks)

    # --- –º–µ–¥–∏–∞ ---
    media_column_headers = [f"–°—Å—ã–ª–∫–∞ {i}" for i in range(1, 11)]
    media_urls = []
    for header in media_column_headers:
        url = record.get(header)
        if url and isinstance(url, str) and url.startswith("http"):
            media_urls.append(url)
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(media_urls)} URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row_idx}.")

    media_data = []
    if media_urls:
        for url in media_urls:
            try:
                resp = requests.get(url, timeout=(5, 60))
                resp.raise_for_status()
                file_data = resp.content
                file_base = url.split("/")[-1].split("?")[0]
                content_type = resp.headers.get('Content-Type', '').lower()
                if file_base and '.' in file_base:
                    file_name = file_base
                else:
                    if 'video' in content_type:
                        file_name = "video.mp4"
                    elif 'image' in content_type:
                        file_name = "image.jpg"
                    else:
                        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø {content_type} –¥–ª—è {url}. –ü—Ä–æ–ø—É—Å–∫.")
                        continue
                media_data.append((file_data, file_name))
            except Exception as e:
                print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ {url} - {e}")

    # --- –æ—Ç–ø—Ä–∞–≤–∫–∞ ---
    if pending_indices is None:
        target_indexes = [
            i for i, acc in ACC_BY_INDEX.items()
            if i in SENT_FLAG_INDICES and acc.get("channel")
            and str(record.get(str(i), record.get(i, ""))).upper() != "TRUE"
        ]
    else:
        target_indexes = [i for i in pending_indices if i in ACC_BY_INDEX and ACC_BY_INDEX[i].get("channel")]

    clients_with_channels = [(CLIENT_BY_INDEX[i], ACC_BY_INDEX[i]) for i in sorted(target_indexes)]

    async def _send_to_one(client, acc):
        channel_str = acc.get("channel")
        acc_idx = acc.get("index")
        # Skip if we already sent this row to this account in this process
        rt_key = (row_idx, acc_idx)
        if rt_key in SENT_RUNTIME:
            return acc_idx, channel_str, True, "runtime-dup-skip"
        if not channel_str:
            return acc_idx, channel_str, False, "no_channel"

        try:
            if not client.is_connected():
                await client.connect()
        except Exception as e:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: TG{acc_idx} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return acc_idx, channel_str, False, f"connect: {e}"

        try:
            channel = int(channel_str)
        except (ValueError, TypeError):
            channel = channel_str

        try:
            if media_data:
                file_objs = []
                for data, fname in media_data:
                    bio = io.BytesIO(data); bio.name = fname; file_objs.append(bio)
                await client.send_file(
                    channel, file_objs, caption=message_html,
                    supports_streaming=True, parse_mode=CustomHtml()
                )
            else:
                await client.send_message(
                    channel, message_html, parse_mode=CustomHtml()
                )

            # –æ—Ç–º–µ—Ç–∏—Ç—å —Ñ–ª–∞–≥
            flag_name = str(acc_idx)
            col_idx = get_col_index(flag_name)
            if col_idx:
                try:
                    worksheet.update_cell(row_idx, col_idx, "TRUE")
                except Exception as e_upd:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ {flag_name} (—Å—Ç—Ä–æ–∫–∞ {row_idx}): {e_upd}")
            SENT_RUNTIME.add(rt_key)
            return acc_idx, channel_str, True, None

        except (tl_errors.FloodWaitError, tl_errors.SlowModeWaitError) as e:
            print(f"–û–®–ò–ë–ö–ê: TG{acc_idx} –ª–∏–º–∏—Ç Telegram: {e}")
            return acc_idx, channel_str, False, f"rate: {e}"
        except Exception as e:
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: TG{acc_idx} –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}. –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä...")
            try:
                await client.disconnect()
            except Exception:
                pass
            try:
                await client.connect()
                if media_data:
                    file_objs = []
                    for data, fname in media_data:
                        bio = io.BytesIO(data); bio.name = fname; file_objs.append(bio)
                    await client.send_file(
                        channel, file_objs, caption=message_html,
                        supports_streaming=True, parse_mode=CustomHtml()
                    )
                else:
                    await client.send_message(
                        channel, message_html, parse_mode=CustomHtml()
                    )
                # –æ—Ç–º–µ—Ç–∏—Ç—å —Ñ–ª–∞–≥
                flag_name = str(acc_idx)
                col_idx = get_col_index(flag_name)
                if col_idx:
                    try:
                        worksheet.update_cell(row_idx, col_idx, "TRUE")
                    except Exception as e_upd:
                        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ {flag_name} (—Å—Ç—Ä–æ–∫–∞ {row_idx}): {e_upd}")
                SENT_RUNTIME.add(rt_key)
                return acc_idx, channel_str, True, None
            except Exception as e2:
                print(f"–û–®–ò–ë–ö–ê: TG{acc_idx} –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
                return acc_idx, channel_str, False, f"retry: {e2}"

    results = await asyncio.gather(
        *[_send_to_one(client, acc) for (client, acc) in clients_with_channels],
        return_exceptions=False
    )

    ok = sum(1 for (_, _, s, _) in results if s)
    fail = [(i, ch, err) for (i, ch, s, err) in results if not s]
    print(f"–°—Ç—Ä–æ–∫–∞ {row_idx}: –ø–µ—Ä—Å-–æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –£—Å–ø–µ—à–Ω–æ {ok}/{len(clients_with_channels)}. –ù–µ—É–¥–∞—á–∏: {fail}")

# --- 5. –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    if not clients:
        print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∏ –æ–¥–∏–Ω Telegram –∫–ª–∏–µ–Ω—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TG_API_ID/TG_API_HASH –∏ TG{n}_SESSION/TG{n}_CHANNEL.")
        return

    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    results = await asyncio.gather(*(c.start() for c in clients), return_exceptions=True)
    for idx, res in enumerate(results, start=1):
        if isinstance(res, Exception):
            print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –∫–ª–∏–µ–Ω—Ç #{idx} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {res}")
    print("–ö–ª–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")

    while True:
        try:
            alive = sum(1 for c in clients if c.is_connected())
            # Proactive reconnect sweep to recover from "Server closed the connection" events
            for acc_idx, client in CLIENT_BY_INDEX.items():
                if not client.is_connected():
                    try:
                        await client.connect()
                        print(f"TG{acc_idx} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω.")
                    except Exception as e:
                        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: TG{acc_idx} –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å: {e}")
            print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {alive}/{len(clients)}")
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã... {datetime.now(tz).strftime('%H:%M:%S')}")
            records = worksheet.get_all_records()
            now = datetime.now(tz)

            for idx, record in enumerate(records, start=2):
                if not str(record.get("–ò–º—è", "")).strip():
                    continue

                active_idx = [acc["index"] for acc in accounts if acc.get("channel") and acc["index"] in SENT_FLAG_INDICES]
                if not active_idx:
                    continue

                pending_idx = [
                    i for i in active_idx
                    if str(record.get(str(i), record.get(i, ""))).upper() != "TRUE"
                ]
                if not pending_idx:
                    continue

                time_str = record.get("–í—Ä–µ–º—è")
                if not time_str:
                    continue

                try:
                    sched_time = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
                    sched_time = tz.localize(sched_time)

                    if sched_time <= now:
                        print(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}.")
                        await send_post(record, idx, pending_indices=pending_idx)

                except ValueError:
                    print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫–µ {idx}: '{time_str}'. –û–∂–∏–¥–∞–µ—Ç—Å—è '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°'.")
                except Exception as e:
                    print(f"–û–®–ò–ë–ö–ê –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")

            await asyncio.sleep(REFRESH_SECONDS)

        except gspread.exceptions.APIError as e:
            print(f"–û–®–ò–ë–ö–ê API Google Sheets: {e}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {REFRESH_SECONDS} —Å–µ–∫.")
            await asyncio.sleep(REFRESH_SECONDS)
        except Exception as e:
            print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(REFRESH_SECONDS)

# --- 6. –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ---

if __name__ == "__main__":
    asyncio.run(main())